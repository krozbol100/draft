{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "connString": {"type": "secureObject"},
      "utcValue": {"type": "string", "defaultValue": "[utcNow()]"}
    },
    "resources": [
      {
        "type": "Microsoft.Resources/deploymentScripts",
        "apiVersion": "2020-10-01",
        "name": "encryptConnString",
        "location": "[resourceGroup().location]",
        "kind": "AzurePowerShell",
        "properties": {
          "forceUpdateTag": "[parameters('utcValue')]",
          "azPowerShellVersion": "5.0",
          "scriptContent": "
            param([string]$sqlServerName, [string]$sqlAdmin, [string]$sqlPassword, [string]$databaseName01, [string]$databaseName02)
            $sqlPassword = [Text.Encoding]::Utf8.GetString([Convert]::FromBase64String($sqlPassword))
            #$sqlPassword = $sqlPassword.substring(1,$sqlPassword.Length-2)
            #$sqlServerName = $args[0]
            #$sqlAdmin = $args[1]
            #$sqlPassword = $args[2]
            #$databaseName = $args[3]
            $connStr1 = 'Server=tcp:' + $sqlServerName + '.database.windows.net,1433;Initial Catalog=' + $databaseName01 + ';Persist Security Info=False;User ID=' + $sqlAdmin + ';Password=' + $sqlPassword + ';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;'
            $connStr2 = 'Server=tcp:' + $sqlServerName + '.database.windows.net,1433;Initial Catalog=' + $databaseName02 + ';Persist Security Info=False;User ID=' + $sqlAdmin + ';Password=' + $sqlPassword + ';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;'

            $key = [Byte[]](122, 2, 87, 224, 212, 156, 97, 98, 4, 1, 78, 92, 44, 43, 201, 14)
            $IV = [Byte[]](73, 37, 17, 71, 1, 31, 33, 77)

            foreach($i in 1..2){
              $connStr = Get-Variable -Name \"connStr$i\" -ValueOnly

              $r = New-Object System.Security.Cryptography.RC2CryptoServiceProvider
              $r.Key = $key
              $r.IV = $IV
              $ms = New-Object IO.MemoryStream
              $c = $r.CreateEncryptor()
              $cs = New-Object Security.Cryptography.CryptoStream $ms,$c,\"Write\"
              $sw = New-Object IO.StreamWriter $cs
              $sw.Write($connStr)

              $sw.Close()  
              $cs.Close() 
              $ms.Close() 
              $r.Clear() 

              [byte[]]$result = $ms.ToArray() 

              $resultConString = [Convert]::ToBase64String($result);
              New-Variable -Name \"resultConString$i\" -Value $resultConString
            }
            $DeploymentScriptOutputs['conString1'] = $resultConString1
            $DeploymentScriptOutputs['conString2'] = $resultConString2
            #$DeploymentScriptOutputs['sql'] = $sqlPassword
            #$DeploymentScriptOutputs['connStr'] = $connStr
        ",
          "arguments": "[concat(
            parameters('connString').sqlServerName,' ', 
            parameters('connString').sqlAdmin,' ', 
            base64(parameters('connString').sqlPassword),' ', 
            parameters('connString').databaseName01,' ', 
            parameters('connString').databaseName02,' '
            )]",
          "timeout": "PT1H",
          //"cleanupPreference": "OnSuccess",
          "retentionInterval": "P1D"
        }
      }
    ],
    "outputs": {
      "result01": {
        "value": "[reference('encryptConnString').outputs.conString1]",
        "type": "string"
      },
      "result02": {
        "value": "[reference('encryptConnString').outputs.conString2]",
        "type": "string"
      },
    }
  }